version: '3.8'

services:
  frontend:
    container_name: frontend
    build:
      context: .
      dockerfile: ClientApp/Dockerfile
    ports:
      - "80:80"
      - "443:443"  # Открываем порт для HTTPS
    networks:
      - my-network

  backend:
    container_name: backend
    build:
      context: .
      dockerfile: WebApi/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - DbConnection=Server=mssql,1433;Database=PetProtector;User Id=sa;Password=${MSSQL_SA_PASSWORD};TrustServerCertificate=True;
      - RedisConnection=redis:6379,password=${REDIS_PASS}
      - Authentication__Yandex__ClientId=${YANDEX_CLIENT_ID}
      - Authentication__Yandex__ClientSecret=${YANDEX_CLIENT_SECRET}
      - SmtpConfigurations__Server=${SMTP_SERVER}
      - SmtpConfigurations__Port=${SMTP_PORT}
      - SmtpConfigurations__Login=${SMTP_LOGIN}
      - SmtpConfigurations__Password=${SMTP_PASS}
      - JwtSettings__Secret=${JWT_SECRET}
    networks:
      - my-network
    depends_on:
      - mssql
      - redis

  mssql:
    container_name: mssql
    image: mcr.microsoft.com/mssql/server:2019-latest
    environment:
      SA_PASSWORD: ${MSSQL_SA_PASSWORD}
      ACCEPT_EULA: "Y"
    ports:
      - "1433:1433"
    networks:
      - my-network
    volumes:
    - mssql-data:/var/opt/mssql
      
  redis:
    container_name: redis
    image: redis:latest
    environment:
      - REDIS_PASS=${REDIS_PASS}
    command: redis-server --requirepass ${REDIS_PASS}
    networks:
      - my-network
    volumes:
    - redis-data:/data

networks:
  my-network:
    driver: bridge

volumes:
  mssql-data:
  redis-data: